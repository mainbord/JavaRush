package com.javarush.test.level28.lesson15.big01.view;

import com.javarush.test.level28.lesson15.big01.Controller;
import com.javarush.test.level28.lesson15.big01.vo.Vacancy;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;


public class HtmlView implements View {
    private Controller controller;
    private final String filePath = "./src/" + this.getClass().getPackage().getName().replace('.', '/') + "/vacancies.html";


    @Override
    public void setController(Controller controller) {
        this.controller = controller;
    }

    @Override
    public void update(List<Vacancy> vacancies) {
        updateFile(getUpdatedFileContent(vacancies));
    }

    public static void main(String[] args)
    {

        try
        {
            Document doc = Jsoup.parse(new File("/home/mainbord/IdeaProjects/JavaRushHomeWork/src/com/javarush/test/level28/lesson15/big01/view/vacancies.html"),"utf-8");
            Elements el;
            el = doc.getElementsByClass("template").clone();
            el.removeAttr("style");
            el.removeClass("template");
            for (Element el1 : doc.getElementsByClass("vacancy")){
                if (el1.className().equals("vacancy")){el1.remove();}
            }
            System.out.println();
            System.out.println();
            System.out.println(doc);

        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

/*        Document doc1;
        String filePath = "C:\\Users\\work\\IdeaProjects\\JavaRushHomeWork\\src\\com\\javarush\\test\\level28\\lesson15\\big01\\view\\backup.html";
        System.out.println("filePath = " + filePath);
        try
        {
            doc1 = Jsoup.connect(filePath)
                    .userAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36")
                    .referrer("none")
                    .get();
            for (Element el : doc1.getElementsByClass("vacancy")){
                System.out.println(el);
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }*/
    }

    private String getUpdatedFileContent(List<Vacancy> vacancies) {
        Document doc;
        try
        {
            doc = getDocument();
            //* 2. Получи элемент, у которого есть класс template.
            Elements el;
            //Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
            el = doc.getElementsByClass("template").clone();
            el.removeAttr("style");
            el.removeClass("template");
            //3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
            for (Element el1 : doc.getElementsByClass("vacancy")){
                if (el1.className().equals("vacancy")){el1.remove();}
            }


            Document doc1;
            doc1 = Jsoup.connect("./src/" + this.getClass().getPackage().getName().replace('.', '/') + "backup.html")
                    .userAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36")
                    .referrer("none")
                    .get();
            doc1.remove();


            for(Vacancy vac
                    :vacancies){

        }

/*
* 2. Получи элемент, у которого есть класс template.
Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
Используй этот элемент в качестве шаблона для добавления новой строки в таблицу вакансий.

3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
В файле backup.html это одна вакансия - Junior Java Developer.
Нужно удалить все теги tr, у которых class="vacancy".
Но тег tr, у которого class="vacancy template", не удаляй.
Используй метод remove.

4. В цикле для каждой вакансии:
4.1. склонируй шаблон тега, полученного в п.2. Метод clone.
4.2. получи элемент, у которого есть класс "city". Запиши в него название города из вакансии.
4.3. получи элемент, у которого есть класс "companyName". Запиши в него название компании из вакансии.
4.4. получи элемент, у которого есть класс "salary". Запиши в него зарплату из вакансии.
4.5. получи элемент-ссылку с тегом a. Запиши в него название вакансии(title). Установи реальную ссылку на вакансию вместо href="url"
4.6. добавь outerHtml элемента, в который ты записывал данные вакансии,
непосредственно перед шаблоном <tr class="vacancy template" style="display: none">

5. Верни html код всего документа в качестве результата работы метода.*/


            Elements elements = doc.select("[data-qa=vacancy-serp__vacancy]");
            for (Element element : elements) {
                Element titleElement = element.select("[data-qa=vacancy-serp__vacancy-title]").first();
                String title = titleElement.text();

                Element salaryElement = element.select("[data-qa=vacancy-serp__vacancy-compensation]").first();
                String salary = "";
                if (salaryElement != null) {
                    salary = salaryElement.text();
                }
                String city = element.select("[data-qa=vacancy-serp__vacancy-address]").first().text();
                String companyName = element.select("[data-qa=vacancy-serp__vacancy-employer]").first().text();
                String siteName = "http://hh.ua/";
                String url = titleElement.attr("href");
            }






        }
        catch (IOException e)
        {
            e.printStackTrace();
            return "Some exception occurred";
        }

        return doc.html();
    }

    private void updateFile(String fileContent) {
        try(FileWriter fileWriter = new FileWriter(filePath))
        {
            fileWriter.write(fileContent);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public void userCitySelectEmulationMethod() {
        controller.onCitySelect("Moscow");
    }

    protected Document getDocument() throws IOException{
        /*
        * 1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
распарси файл vacancies.html используя Jsoup. Кодировка файла "UTF-8", используй поле filePath.*/


        Document doc = Jsoup.parse(new File(filePath),"utf-8");
        return  doc;
    }

}
