package com.javarush.test.level28.lesson15.big01.view;

import com.javarush.test.level28.lesson15.big01.Controller;
import com.javarush.test.level28.lesson15.big01.vo.Vacancy;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.*;
import java.util.List;


public class HtmlView implements View {
    private Controller controller;
    private final String filePath = "./src/" + this.getClass().getPackage().getName().replace('.', '/') + "/vacancies.html";


    @Override
    public void setController(Controller controller) {
        this.controller = controller;
    }

    @Override
    public void update(List<Vacancy> vacancies) {
        updateFile(getUpdatedFileContent(vacancies));
    }

    public static void main(String[] args)
    {

        try
        {
            //win
            //Document doc = Jsoup.parse(new File("C:\\Users\\work\\IdeaProjects\\JavaRushHomeWork\\src\\com\\javarush\\test\\level28\\lesson15\\big01\\view\\vacancies.html"),"utf-8");
            //linux
            Document doc = Jsoup.parse(new File("/home/mainbord/IdeaProjects/JavaRushHomeWork/src/com/javarush/test/level28/lesson15/big01/view/vacancies.html"),"utf-8");
            Elements template;
            template = doc.getElementsByClass("template").clone();
            System.out.println(doc.getElementsByClass("template").size());
            template.removeAttr("style");
            template.removeClass("template");

            System.out.println("++++++++++++++++++++++++++++++");
            System.out.println(doc.getElementsByClass("template").first().before("<div></div>"));
            //doc.select("[vacancy template").first().before("<div></div>");
            System.out.println(doc.html());
            /*            template.first().getElementsByTag("a").first().attr("href", "ya.ru");
            System.out.println(template);*/
            System.out.println("++++++++++++++++++++++++++++++");

            System.out.println(template.get(0).getElementsByClass("city").get(0));
            System.out.println();
            System.out.println();
            System.out.println("_______");
            System.out.println(template.get(0).getElementsByClass("city").get(0).prependText("________"));
            System.out.println("_______");
            System.out.println();
            System.out.println();

            for (Element el1 : doc.getElementsByClass("vacancy")){
                if (el1.className().equals("vacancy")){el1.remove();}
            }
            System.out.println();
            System.out.println();
            System.out.println(doc);

        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

/*        Document doc1;
        String filePath = "C:\\Users\\work\\IdeaProjects\\JavaRushHomeWork\\src\\com\\javarush\\test\\level28\\lesson15\\big01\\view\\backup.html";
        System.out.println("filePath = " + filePath);
        try
        {
            doc1 = Jsoup.connect(filePath)
                    .userAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36")
                    .referrer("none")
                    .get();
            for (Element el : doc1.getElementsByClass("vacancy")){
                System.out.println(el);
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }*/
    }

    private String getUpdatedFileContent(List<Vacancy> vacancies) {
        System.out.println("yes");
        Document document;
        try
        {
            document = getDocument();
            //* 2. Получи элемент, у которого есть класс template.
            Elements template;
            //Сделай копию этого объекта, удали из нее атрибут "style" и класс "template".
            template = document.getElementsByClass("template").clone();
            template.removeAttr("style");
            template.removeClass("template");

            //3. Удали все добавленные ранее вакансии. У них единственный класс "vacancy".
            for (Element element : document.getElementsByClass("vacancy")){
                if (element.className().equals("vacancy")){
                    element.remove();
                    System.out.println("Element removed successfully");
                }
            }
            for(Vacancy vac
                    : vacancies){
                template.first().getElementsByClass("city").first().prependText(vac.getCity());
                template.first().getElementsByClass("companyName").first().prependText(vac.getCompanyName());
                template.first().getElementsByClass("salary").first().prependText(vac.getSalary());
                template.first().getElementsByTag("a").first().prependText(vac.getTitle());
                template.first().getElementsByTag("a").first().attr("href", vac.getUrl());
                document.getElementsByClass("template").first().before(template.html());
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
            return "Some exception occurred";
        }
//5. Верни html код всего документа в качестве результата работы метода.
        return document.html();
    }

    private void updateFile(String fileContent) {
        try(OutputStreamWriter fileWriter = new OutputStreamWriter(new FileOutputStream(filePath),"UTF-8"))
        {
            fileWriter.write(fileContent);
            fileWriter.flush();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public void userCitySelectEmulationMethod() {
        controller.onCitySelect("Odessa");
    }

    protected Document getDocument() throws IOException{
        /*
        * 1. В HtmlView создай protected метод Document getDocument() throws IOException, в котором
распарси файл vacancies.html используя Jsoup. Кодировка файла "UTF-8", используй поле filePath.*/


        Document doc = Jsoup.parse(new File(filePath),"utf-8");
        return  doc;
    }

}
