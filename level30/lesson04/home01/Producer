package com.javarush.test.level30.lesson04.home01;

import java.util.concurrent.TransferQueue;

/**
 * Created by work on 28.12.2016.
 */
public class Producer implements Runnable
{
    private TransferQueue<ShareItem> queue;

    public Producer(TransferQueue<ShareItem> queue)
    {
        this.queue = queue;
    }

    @Override
    public void run()
    {
        /*
        * 4. Реализация метода run для Producer:
        * 4.1. Используя метод offer добавить в очередь 9 ShareItem-ов с такими параметрами: ("ShareItem-N", N), где N - номер элемента от 1 до 9
        * 4.2. Перед каждым добавлением вывести фразу "Элемент 'ShareItem-N' добавлен". Используйте System.out.format
        * 4.3. Усыпить трэд на 0.1 секунды
        * 4.4. Если у очереди есть Consumer, не занятый работой, то вывести фразу "Consumer в ожидании!".
        * Просмотрите методы интерфейса TransferQueue, там есть нужный метод.*/
        while (!Thread.currentThread().isInterrupted()){
            int n = 0;
            n++;
            System.out.format("Элемент 'ShareItem-%s' добавлен",n);
            System.out.println();
            queue.add(new ShareItem("ShareItem-"+n, n));
            try
            {
                Thread.sleep(100);
                if (queue.getWaitingConsumerCount() > 0){
                    System.out.println("Consumer в ожидании!");
                }
                if (n==9){break;}
            }
            catch (InterruptedException e)
            {
                return;
            }
        }
    }
}
