package com.javarush.test.level22.lesson09.task03;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/* Составить цепочку слов
В методе main считайте с консоли имя файла, который содержит слова, разделенные пробелом.
В методе getLine используя StringBuilder расставить все слова в таком порядке,
чтобы последняя буква данного слова совпадала с первой буквой следующего не учитывая регистр.
Каждое слово должно участвовать 1 раз.
Метод getLine должен возвращать любой вариант.
Слова разделять пробелом.
В файле не обязательно будет много слов.

Пример тела входного файла:
Киев Нью-Йорк Амстердам Вена Мельбурн

Результат:
Амстердам Мельбурн Нью-Йорк Киев Вена
*/
public class Solution {
    public static void main(String[] args) throws IOException{
//...
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String filename = reader.readLine();
        ArrayList<String> stringOfWords = new ArrayList<>();
        ArrayList<String> words = new ArrayList<>();
        reader = new BufferedReader(new FileReader(filename));
        while (reader.ready()){
            stringOfWords.add(reader.readLine());
        }
        for (String temp : stringOfWords){
            String [] arr = temp.split(" ");
            for (String temp2 : arr){
                words.add(temp2);
            }
        }
        String [] ourString = new String [words.size()];
        for (int i = 0; i < ourString.length; i++)
        {
            ourString[i] = words.get(i);
        }
        reader.close();
        StringBuilder result = getLine(ourString);
        System.out.println(result.toString());
    }

    public static StringBuilder getLine(String... words) {
        if (words.length == 0){return new StringBuilder();}
        StringBuilder sb = new StringBuilder();
        ArrayList<String> listOfWords = new ArrayList<>();
        listOfWords.addAll(Arrays.asList(words));
        sb.append(listOfWords.get(0));
        sb.append(" ");
        int count = 0;
        for (int i = 0; i < listOfWords.size(); i++)
        {
            count = 0;
            String s1 = listOfWords.get(i);
            if (s1.equals("")){continue;}
            for (int j = i+1; j < listOfWords.size(); j++)
            {
                String s2 = listOfWords.get(j);
                if (s1.toLowerCase().charAt(s1.length()-1) == s2.toLowerCase().charAt(0)){
                    if (i != 0){
                    sb.append(s1);
                    sb.append(" ");
                    sb.append(s2);
                    sb.append(" ");
                    count++;}
                    else {                    sb.append(s2);
                        sb.append(" ");
                        count++;}
                    if (j == listOfWords.size()){
                        sb.append(s2);
                        sb.append(" ");
                    }
                    listOfWords.remove(i);
                    i--;
                    break;
                }
            }
            if (count == 0){break;}
        }
        sb = new StringBuilder(sb.toString().trim());
        return sb;
    }
}
