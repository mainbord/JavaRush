package com.javarush.test.level22.lesson09.task03;

import java.io.*;
import java.util.*;
import java.util.concurrent.SynchronousQueue;

/* Составить цепочку слов
В методе main считайте с консоли имя файла, который содержит слова, разделенные пробелом.
В методе getLine используя StringBuilder расставить все слова в таком порядке,
чтобы последняя буква данного слова совпадала с первой буквой следующего не учитывая регистр.
Каждое слово должно участвовать 1 раз.
Метод getLine должен возвращать любой вариант.
Слова разделять пробелом.
В файле не обязательно будет много слов.

Пример тела входного файла:
Киев Нью-Йорк Амстердам Вена Мельбурн

Результат:
Амстердам Мельбурн Нью-Йорк Киев Вена
*/
public class Solution {
    public static void main(String[] args) throws IOException
    {
//...
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String fileName = reader.readLine();
        reader.close();
        Scanner fileIn = new Scanner(new FileInputStream(fileName));
        ArrayList<String> words = new ArrayList<>();

        while (fileIn.hasNext()) {
            words.add(fileIn.next());
        }
        fileIn.close();

        String [] ourString = new String [words.size()];
        for (int i = 0; i < ourString.length; i++)
        {
            ourString[i] = words.get(i);
        }

        StringBuilder result = getLine(ourString);
        System.out.println(result.toString());
    }

    public static StringBuilder getLine(String... words) {
        if (words == null || words.length == 0)
            return new StringBuilder();
        if ("".equals(words[0]) || words.length == 1)
            return new StringBuilder(words[0]);

        ArrayList<String> inwords = new ArrayList<>(Arrays.asList(words));
        ArrayList<String> outwords = new ArrayList<>();

        breakpoint:
        for (int i = 0; i < inwords.size(); i++)
        {
            outwords = new ArrayList<>();
            String startword = inwords.get(i);
            outwords.add(startword);
            ArrayList<String> inwordscopy = new ArrayList<>(inwords);
            inwordscopy.remove(i);
            ArrayDeque<Integer> previousSteps = new ArrayDeque<>();
            HashMap<Integer,Boolean> readElemets = new HashMap<>();
            for (int h = 0; h < inwordscopy.size(); h++)
            {
                readElemets.put(h,false);
            }

            int step = 0;
            loop:
            while (true){
                for (int j = step; j < inwordscopy.size(); j++)
                {
                    String currentelement = inwordscopy.get(j);
                    if (readElemets.get(j)== false){
                        if (startword.toLowerCase().charAt(startword.length()-1) == currentelement.toLowerCase().charAt(0)){
                            outwords.add(currentelement);
                            readElemets.put(j, true);
                            startword = currentelement;
                            previousSteps.push(j);
                            step=0;
                            j=step-1;
                        }
                    }
                }
                if(outwords.size()==inwords.size()){
                    break breakpoint;
                }
                if (previousSteps.size()==0){break;}
                outwords.remove(outwords.size() - 1);
                step = previousSteps.pop();
                readElemets.put(step,false);
                step++;
                startword = outwords.get(outwords.size()-1);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (String ss : outwords){
            sb.append(ss);
            sb.append(" ");
        }
        sb = new StringBuilder(sb.toString().trim());
        return sb;
    }
}
