package com.javarush.test.level31.lesson02.home01;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/* Проход по дереву файлов
1. На вход метода main подаются два параметра.
Первый - path - путь к директории, второй - resultFileAbsolutePath - имя файла, который будет содержать результат.
2. Для каждого файла в директории path и в ее всех вложенных поддиректориях выполнить следующее:
2.1. Если у файла длина в байтах больше 50, то удалить его.
2.2. Если у файла длина в байтах НЕ больше 50, то для всех таких файлов:
2.2.1. отсортировать их по имени файла в возрастающем порядке, путь не учитывать при сортировке
2.2.2. переименовать resultFileAbsolutePath в 'allFilesContent.txt'
2.2.3. в allFilesContent.txt последовательно записать содержимое всех файлов из п. 2.2.1. Тела файлов разделять "\n"
2.3. Удалить директории без файлов (пустые).
Все файлы имеют расширение txt.
*/
public class Solution {
    public static void main(String[] args) {

/*        File file1 = new File("C:\\drivers\\WLAN Driver (Realtek, Atheros, Broadcom)");
        System.out.println(file1.isDirectory() + " " + file1.getParent());*/
/*        System.out.println(args[0] + "   " + args[1]);*/

        String path = args[0];
        String resultFileAbsolutePath = args[1];

        File filePath = new File(path);

        List<File> listOfFiles = checkFile(filePath);
        Comparator<File> compareByName = new Comparator<File>()
        {
            @Override
            public int compare(File o1, File o2)
            {
                return o1.getName().compareTo(o2.getName());
            }
        };
        Collections.sort(listOfFiles,compareByName);
        File resultFile = new File(resultFileAbsolutePath);
        resultFile.renameTo(new File(resultFile.getParent() + File.separator + "allFilesContent.txt"));

        for (File file:
                listOfFiles)
        {
            try(FileWriter fileWriter = new FileWriter(resultFile);
                BufferedReader fileReader = new BufferedReader(new FileReader(file)))
            {
                while (fileReader.ready())
                {
                    fileWriter.write(fileReader.readLine());
                    fileWriter.write("\n");
                }
                fileWriter.write("\n");
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    }

    private static List<File> checkFile (File inputFile){
        System.out.println("entering in folder " + inputFile.getParent());
        List<File> listOfFiles = new ArrayList<>();
        for (File file:
                inputFile.listFiles())
        {
            if (file.length() > 50){
                if(file.isDirectory()){
                    if (file.length() == 0){
                        System.out.println("directory deleted");
                        file.delete();
                    }
                    else {checkFile(file);}
                }
                else {
                    System.out.println("file deleted");
                    file.delete();
                }
            }
            else {
                if (!file.isDirectory())
                {listOfFiles.add(file);}
            }
        }
        return listOfFiles;
    }

}
