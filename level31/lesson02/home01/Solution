package com.javarush.test.level31.lesson02.home01;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/* Проход по дереву файлов
1. На вход метода main подаются два параметра.
Первый - path - путь к директории, второй - resultFileAbsolutePath - имя файла, который будет содержать результат.
2. Для каждого файла в директории path и в ее всех вложенных поддиректориях выполнить следующее:
2.1. Если у файла длина в байтах больше 50, то удалить его.
2.2. Если у файла длина в байтах НЕ больше 50, то для всех таких файлов:
2.2.1. отсортировать их по имени файла в возрастающем порядке, путь не учитывать при сортировке
2.2.2. переименовать resultFileAbsolutePath в 'allFilesContent.txt'
2.2.3. в allFilesContent.txt последовательно записать содержимое всех файлов из п. 2.2.1. Тела файлов разделять "\n"
2.3. Удалить директории без файлов (пустые).
Все файлы имеют расширение txt.
*/
public class Solution {
    public static void main(String[] args) {

        File file1 = new File("C:\\123\\222");
        System.out.println(file1.isDirectory() + " " + file1.listFiles().length);
/*        System.out.println(args[0] + "   " + args[1]);*/

        String path = args[0];
        String resultFileAbsolutePath = args[1];

        File filePath = new File(path);
        System.out.println("____ " + filePath + " " + filePath.getName());

        List<File> listOfFiles = new ArrayList<>();
        List<File> list = checkFile(filePath, listOfFiles);
        Comparator<File> compareByName = new Comparator<File>()
        {
            @Override
            public int compare(File o1, File o2)
            {
                return o1.getName().compareTo(o2.getName());
            }
        };
        Collections.sort(list,compareByName);
        File resultFile = new File(resultFileAbsolutePath);
        resultFile.renameTo(new File(resultFile.getParent() + File.separator + "allFilesContent.txt"));

        System.out.println();
        System.out.println();
        try (PrintWriter fileWriter = new PrintWriter(new BufferedWriter(new FileWriter(resultFile)))){
            for (File file:
                    list)
            {
                //System.out.println(file);
                try(BufferedReader fileReader = new BufferedReader(new FileReader(file)))
                {
                    while (fileReader.ready())
                    {
                        String ss = fileReader.readLine();
                        char [] mass = new char[1024*1024];
                        fileWriter.println(ss);
                        fileWriter.println(System.lineSeparator());
                    }
                    fileWriter.println(System.lineSeparator());
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }

    private static List<File> checkFile (File inputFile, List<File> listOfFiles){
        System.out.println("entering in folder " + inputFile.getParent() + File.separator + inputFile.getName());
        for (File file:
                inputFile.listFiles())
        {
                if(file.isDirectory()){
                    if (file.listFiles().length == 0){
                        System.out.println("directory deleted " + file);
                        file.delete();
                    }
                    else {
                        System.out.println("enter in other folder " + file);
                        checkFile(file, listOfFiles);
                    }
                }
                else {
                    if (file.length() > 50){
                        System.out.println("file deleted " + file);
                        file.delete();
                    }
                    else {
                        listOfFiles.add(file);
                        System.out.println("file added " + listOfFiles.size());
                    }
                }
        }
        return listOfFiles;
    }

}
