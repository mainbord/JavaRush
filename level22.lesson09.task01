package com.javarush.test.level22.lesson09.task01;

import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/* Обращенные слова
В методе main с консоли считать имя файла, который содержит слова, разделенные пробелами.
Найти в тексте все пары слов, которые являются обращением друг друга. Добавить их в result.
Порядок слов first/second не влияет на тестирование.
Использовать StringBuilder.
Пример содержимого файла
рот тор торт о
о тот тот тот
Вывод:
рот тор
о о
тот тот
*/
public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) {
        try(BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));)
        {
            String filename = reader.readLine();
            try(BufferedReader fin = new BufferedReader(new FileReader(filename))){
                ArrayList<String> lines = new ArrayList<>();
                while (fin.ready()){
                    lines.add(fin.readLine());
                }
                ArrayList<String> words = new ArrayList<>();
                for (String line : lines){
                    String [] wordsInLine = line.split(" ");
                    for (String word : wordsInLine){
                        words.add(word);
                    }
                }
                for (int i = 0; i < words.size(); i++)
                {
                    System.out.println("First loop");
                    StringBuilder sb;
                    String s1 = words.get(i);
                    for (int j = i+1; j < words.size(); j++)
                    {
                        System.out.println(s1 + " " + words.get(j));
                        sb = new StringBuilder(words.get(j));
                        if (s1.equals(sb.reverse().toString())){
                            System.out.println("equals");
                            Pair pair = new Pair();
                            pair.first = s1;
                            pair.second = words.get(j);
                            result.add(pair);
                            words.remove(j);
                            words.remove(i);
                            i--;
                            break;
                        }
                    }
                }
                System.out.println("_____________________");
                for (Pair pr : result){
                    System.out.println(pr);
                }
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }

        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public static class Pair {
        String first;
        String second;

        @Override
        public String toString() {
            return  first == null && second == null ? "" :
                    first == null && second != null ? second :
                            second == null && first != null ? first :
                                    first.compareTo(second) < 0 ? first + " " + second : second + " " + first;

        }
    }

}
